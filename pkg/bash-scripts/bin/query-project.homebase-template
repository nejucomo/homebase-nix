# Generically query a project's metadata
#
# This automagically determines the kind of project to derive the desired metadata, if possible.

function main
{
  parse-args 'path=.' "$@"
  cd "$path"

  set-metadata-field 'name' "$(basename "$(readlink -f .)")"

  if [ -d '.git' ]
  then
    git-metadata
  fi

  if [ -f './Cargo.toml' ]
  then
    try-rust-crate
  fi

  display-json-metadata
}

function git-metadata
{
  set-metadata-field 'git_remotes' "$(git remote -v | grep '(fetch)$' | awk '{ print $2 }')"
  set-metadata-field 'git_branch' "$(git current-branch)"
  set-metadata-field 'git_main_branch' "$(git branch | sed 's/^[* ] //' | grep -E 'main|master' | sort | head -1)"
  set-metadata-field 'git_desc' "$(git describe --always --dirty)"
}

function try-rust-crate
{
  cargojson="$(toml2json ./Cargo.toml)"
  is_crate='no'
  for field in name description version
  do
    val="$(echo "$cargojson" | jq -r ".package.${field}")"
    if ! [ "$val" = 'null' ]
    then
      is_crate='yes'
      set-metadata-field "$field" "$val"
    fi
  done
  [ "$is_crate" = 'yes' ] && set-metadata-field 'type' 'rust-crate'
}

function set-metadata-field
{
  parse-args 'name val' "$@"

  printf -v "QUERY_PROJECT_${name}" '%s' "$val"
  export "QUERY_PROJECT_${name}"
}

function display-json-metadata
{
  jq -n '
    [
      env
      | to_entries
      | .[]
      | select(.key | startswith("QUERY_PROJECT_"))
      | .key = (.key | sub("^QUERY_PROJECT_"; ""))
    ]
    | from_entries
  '
}

source '{{bash_postlude}}/lib/postlude.bash'
